<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Estadísticas - Admin</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome (para íconos) -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    .card { margin-bottom: 20px; }
    #graficoInscritos { max-height: 400px; }
  </style>
</head>
<body>
  <!-- Contenedor principal -->
  <div class="container-fluid">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5>Estadísticas de Postulaciones</h5>
        <div>
          <span class="badge bg-secondary">
            <i class="fas fa-clock"></i> Hora del servidor: 
            <span id="horaServidor"><%= new Date().toLocaleTimeString('es-ES') %></span>
          </span>
        </div>
      </div>
      <div class="card-body">
        <!-- Tarjetas de resumen -->
        <div class="row">
          <div class="col-md-4">
            <div class="card text-white bg-primary mb-3">
              <div class="card-header">Total Postulantes</div>
              <div class="card-body">
                <h1 class="card-title text-center" id="totalPostulantes"><%= stats.total %></h1>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card text-white bg-success mb-3">
              <div class="card-header">Promedio por Hora</div>
              <div class="card-body">
                <h1 class="card-title text-center" id="promedioHora"><%= stats.promedioHora %></h1>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card text-white bg-info mb-3">
              <div class="card-header">Postulaciones por Tipo</div>
              <div class="card-body" id="porTipo">
                <ul class="list-unstyled">
                  <% stats.porTipo.forEach(tipo => { %>
                    <li><%= tipo.tipo_postulacion %>: <strong><%= tipo.count %></strong></li>
                  <% }); %>
                </ul>
              </div>
            </div>
          </div>
        </div>

        <!-- Gráfico de líneas -->
        <div class="card mt-4">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5>Inscripciones por Hora</h5>
            <div>
              <button id="btnRecargar" class="btn btn-sm btn-primary">
                <i class="fas fa-sync-alt"></i> Recargar ahora
              </button>
            </div>
          </div>
          <div class="card-body">
            <canvas id="graficoInscritos" height="100"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // Variables globales
    let chart;
    const initialData = {
      horas: <%- JSON.stringify(inscritosPorHora.map(item => new Date(item.hora).toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })) %>,
      cantidades: <%- JSON.stringify(inscritosPorHora.map(item => item.cantidad)) %>,
      tipos: <%- JSON.stringify(stats.porTipo) %>
    };

    // Inicializar gráfico
    function initChart(horas, cantidades) {
      const ctx = document.getElementById('graficoInscritos').getContext('2d');
      if (chart) chart.destroy(); // Limpiar gráfico anterior

      chart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: horas,
          datasets: [{
            label: 'Inscritos por Hora',
            data: cantidades,
            borderColor: 'rgba(75, 192, 192, 1)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            tension: 0.3,
            fill: true
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: { 
              beginAtZero: true,
              title: { display: true, text: 'Cantidad de inscritos' }
            },
            x: { 
              title: { display: true, text: 'Hora del día' },
              ticks: { maxRotation: 45, minRotation: 45 }
            }
          }
        }
      });
    }

    // Función para actualizar datos
    async function updateData() {
      try {
        const response = await fetch('/admin/estadisticas-data');
        const { stats, inscritosPorHora } = await response.json();

        // Actualizar tarjetas
        document.getElementById('totalPostulantes').textContent = stats.total;
        document.getElementById('promedioHora').textContent = stats.promedioHora;
        
        // Actualizar lista de tipos
        const tiposHtml = stats.porTipo.map(tipo => 
          `<li>${tipo.tipo_postulacion}: <strong>${tipo.count}</strong></li>`
        ).join('');
        document.getElementById('porTipo').innerHTML = `<ul class="list-unstyled">${tiposHtml}</ul>`;

        // Actualizar gráfico
        const horas = inscritosPorHora.map(item => 
          new Date(item.hora).toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })
        );
        const cantidades = inscritosPorHora.map(item => item.cantidad);
        initChart(horas, cantidades);

        // Actualizar hora del servidor
        document.getElementById('horaServidor').textContent = new Date().toLocaleTimeString('es-ES');

      } catch (error) {
        console.error('Error al actualizar:', error);
      }
    }

    // Configurar auto-recarga (3 minutos = 180,000 ms)
    setInterval(updateData, 180000);

    // Botón de recarga manual
    document.getElementById('btnRecargar').addEventListener('click', updateData);

    // Inicializar al cargar la página
    document.addEventListener('DOMContentLoaded', () => {
      initChart(initialData.horas, initialData.cantidades);
    });
  </script>
</body>
</html>